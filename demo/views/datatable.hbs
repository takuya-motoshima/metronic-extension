{{!< default}}
{{#contentFor 'title'}}DataTable{{/contentFor}}
{{#contentFor 'script'}}<script src="build/datatable.js"></script>{{/contentFor}}
{{#contentFor 'sidenav'}}
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#overview" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Overview</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#reference" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Reference</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#basic" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Basic</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#server-side-processing" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Server-side processing</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#column-visibility" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Column visibility integration</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
<!--begin::Item-->
<li class="menu-item py-2 px-3">
  <!--begin::Link-->
  <a href="#disable-first-ajax-call" data-kt-scroll-toggle="true" class="menu-link p-0 nav-link">
    <span class="menu-bullet">
      <span class="bullet bullet-dot"></span>
    </span>
    <span class="menu-title">Disable first ajax call</span>
  </a>
  <!--end::Link-->
</li>
<!--end::Item-->
{{/contentFor}}
<!--begin::Section-->
<div class="pb-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="overview" data-kt-scroll-offset="100">
    <a href="#overview"></a>Overview
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="my-5">
    DataTable component based on <a href="https://datatables.net/" target="_blank">datatables.net</a> with advanced instructions.
  </div>
  <!--end::Block-->
</div>
<!--end::Section-->
<!--begin::Section-->
<div class="py-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="reference" data-kt-scroll-offset="100">
    <a href="#reference"></a>Reference
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="my-5">
    <!--begin::Heading-->
    <div class="fs-2 py-5">Instance Methods</div>
    <!--end::Heading-->
    <!--begin::Table wrapper-->
    <div class="table-responsive">
      <!--begin::Table-->
      <table class="table table-row-bordered mb-0 gy-5">
        <!--begin::Head-->
        <thead>
          <tr class="p-6">
            <th class="min-w-250px">Name</th>
            <th>Description</th>
          </tr>
        </thead>
        <!--end::Head-->
        <!--begin::Body-->
        <tbody>
          <tr>
            <td>
              <code>public constructor()</code>
            </td>
            <td>
              Create a new instance of the Datatable class.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>element: string|HTMLTableElement|JQuery</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    HTMLTableElement selector, element, or JQuery object.
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>options: DatatableOptions</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    An object with the following custom options inherited from <a href="https://datatables.net/reference/option/" target="_blank">DataTables.Settings</a>.
                    <ul>
                      <li class="py-2"><code>firstAjax?: boolean</code>
                        <!--begin::Block-->
                        <div class="pt-3">
                          If asynchronous mode (options.ajax) is enabled, whether to request table data remotely first. If true, request table data first; if false, do not request table data until the Datatable.reload method is called. Default is true.
                        </div>
                        <!--end::Block-->
                      </li>
                      <li class="py-2"><code>locale?: &#039;en&#039;|&#039;ja&#039;</code>
                        <!--begin::Block-->
                        <div class="pt-3">
                          Locale of the displayed text. Default is English (en).
                        </div>
                        <!--end::Block-->
                      </li>
                    </ul>
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              The following values are used as defaults for the options.
              <ul>
                <li class="py-2"><code>scrollX: boolean</code> true</li>
                <li class="py-2"><code>dom: string</code> `&lt;&#039;row&#039;&lt;&#039;col-12 dataTables_pager&#039;p&gt;&gt;&lt;&#039;row&#039;&lt;&#039;col-12&#039;tr&gt;&gt;&lt;&#039;row&#039;&lt;&#039;col-12 dataTables_pager&#039;p&gt;&gt;`</li>
                <li class="py-2"><code>pageLength: number</code> 30</li>
                <li class="py-2"><code>searchDelay: number</code> 500</li>
                <li class="py-2"><code>processing: boolean</code> true</li>
                <li class="py-2"><code>serverSide: boolean</code> If the ajax option is present, it is automatically set to true.</li>
                <li class="py-2"><code>fnServerParams: (aoData: any) =&gt;</code> If Ajax is enabled, the following data is sent to the server.
                  <ul>
                    <li class="py-2"><code>start: number</code> Starting point of the current data set (0 index base, i.e., 0 is the first record).</li>
                    <li class="py-2"><code>length: number</code> The number of records the table can display.</li>
                    <li class="py-2"><code>order: string</code> Columns to be ordered.</li>
                    <li class="py-2"><code>dir: string</code> Direction of sorting. It will be asc or desc, indicating ascending or descending order, respectively.</li>
                    <li class="py-2"><code>draw: number</code> A drawing counter. Used to ensure that responses from the server are drawn in sequence.</li>
                  </ul>
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <div class="highlight-code">
                  <pre class="language-javascript">
                    <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

// Initialize DataTable.
const myTable = new components.Datatable(document.getElementById(&#039;myTable&#039;), {
  columnDefs: [
    {targets: 0, data: &#039;name&#039;},
    {targets: 1, data: &#039;position&#039;},
  ]
});

// Retrieve table data from the server via Ajax request
const myTableWithAjax = new components.Datatable(document.getElementById(&#039;myTableWithAjax&#039;), {
  ajax: {
    url: &#039;/api/persons/pages&#039;
  },
  columnDefs: [
    {targets: 0, data: &#039;name&#039;},
    {targets: 1, data: &#039;position&#039;},
  ]
});</code>
                  </pre>
                </div>
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public reload()</code>
            </td>
            <td>
              Reload the table data from the Ajax data source.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>resetPaging: boolean</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Reset (default action or true) or hold the current paging position (false).
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>Promise&lt;any&gt;</code> JSON data returned by the server.</li>
              </ul>
              <!--end::Return-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public adjustColumns()</code>
            </td>
            <td>
              Adjust column layout.
            </td>
          </tr>
          <tr>
            <td>
              <code>public filter()</code>
            </td>
            <td>
              Filter row by the specified string.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>columnSelector: any</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Column selector. See <a href="https://datatables.net/reference/type/column-selector" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>input: string</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Search string to apply to the table.
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>regex: boolean</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Whether to treat input as a regular expression (true) or not (default is false).
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <ul class="nav nav-pills" role="tablist">
                  <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#filter-html-tab" role="tab">HTML</a></li>
                  <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#filter-js-tab" role="tab">JAVASCRIPT</a></li>
                </ul>
                <!--begin::Tab content-->
                <div class="tab-content">
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade show active" id="filter-html-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-html">
                        <code class="language-html">&lt;table id=&quot;myTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Airi Satou&lt;/td&gt;
      &lt;td&gt;Accountant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Angelica Ramos&lt;/td&gt;
      &lt;td&gt;Chief Executive Officer (CEO)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade" id="filter-js-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-javascript">
                        <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

// Initialize DataTable.
const myTable = new components.Datatable(document.getElementById(&#039;myTable&#039;), {
  columnDefs: [
    {targets: 0, name: &#039;name&#039;},
    {targets: 1, name: &#039;position&#039;},
  ],
});

// Search by column position.
myTable.filter(1, &#039;CEO&#039;);

// Search by column name.
myTable.filter(&#039;position:name&#039;, &#039;CEO&#039;);</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                </div>
                <!--end::Tab content-->
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public getContainer()</code>
            </td>
            <td>
              Returns a table wrapper element.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>asHtmlElement: boolean</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    If true, get it as an HTMLElement, if false, get it as a jQuery object. Default is false.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>JQuery|HTMLElement</code> Table wrapper element.</li>
              </ul>
              <!--end::Return-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public getFilterContainer()</code>
            </td>
            <td>
              Returns a table filter container element.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>asHtmlElement: boolean</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    If true, get it as an HTMLElement, if false, get it as a jQuery object. Default is false.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>JQuery|HTMLElement|null</code> Filter container element.</li>
              </ul>
              <!--end::Return-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public createRow()</code>
            </td>
            <td>
              Create a row.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>data: any</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Data to use for the new row. This may be an array, object, Javascript object instance or a tr element. If a data structure is used (i.e. array or object) it must be in the same format as the other data in the table (i.e. if your table uses objects, pass in an object with the same properties here!).
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>paging: boolean</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    The type of drawing after the row is added. If true, paging is reset to the first page; if false Paging is not reset and the current page is displayed. Default is true.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>Datatable</code></li>
              </ul>
              <!--end::Return-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <ul class="nav nav-pills" role="tablist">
                  <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#create-row-html-tab" role="tab">HTML</a></li>
                  <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#create-row-js-tab" role="tab">JAVASCRIPT</a></li>
                </ul>
                <!--begin::Tab content-->
                <div class="tab-content">
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade show active" id="create-row-html-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-html">
                        <code class="language-html">&lt;table id=&quot;myTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Airi Satou&lt;/td&gt;
      &lt;td&gt;Accountant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Angelica Ramos&lt;/td&gt;
      &lt;td&gt;Chief Executive Officer (CEO)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade" id="create-row-js-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-javascript">
                        <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

// Initialize DataTable.
const myTable = new components.Datatable(document.getElementById(&#039;myTable&#039;), {
  columnDefs: [
    {targets: 0, data: &#039;name&#039;},
    {targets: 1, data: &#039;position&#039;},
  ],
});

// Add object as a new row.
myTable.createRow({name: &#039;Ashton Cox&#039;, position: &#039;Junior Technical Author&#039;});

// Add HTML element as a new row.
const row = document.createElement(&#039;tr&#039;);
row.insertAdjacentHTML(&#039;afterbegin&#039;, &#039;&lt;td&gt;Bradley Greer&lt;/td&gt;&lt;td&gt;Software Engineer&lt;/td&gt;&#039;);
myTable.createRow(row);</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                </div>
                <!--end::Tab content-->
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public deleteRow()</code>
            </td>
            <td>
              Delete row.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>rowSelector: any</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Row selector. See <a href="https://datatables.net/reference/type/row-selector" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>Datatable</code></li>
              </ul>
              <!--end::Return-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <ul class="nav nav-pills" role="tablist">
                  <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#delete-row-html-tab" role="tab">HTML</a></li>
                  <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#delete-row-js-tab" role="tab">JAVASCRIPT</a></li>
                </ul>
                <!--begin::Tab content-->
                <div class="tab-content">
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade show active" id="delete-row-html-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-html">
                        <code class="language-html">&lt;table id=&quot;myTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
      &lt;th&gt;#&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Airi Satou&lt;/td&gt;
      &lt;td&gt;Accountant&lt;/td&gt;
      &lt;td&gt;&lt;button data-on-delete class=&quot;btn btn-primary&quot;&gt;Delete&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Angelica Ramos&lt;/td&gt;
      &lt;td&gt;Chief Executive Officer (CEO)&lt;/td&gt;
      &lt;td&gt;&lt;button data-on-delete class=&quot;btn btn-primary&quot;&gt;Delete&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade" id="delete-row-js-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-javascript">
                        <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

// Initialize DataTable.
const myTable = new components.Datatable(document.getElementById(&#039;myTable&#039;), {
  columnDefs: [
    {targets: 0, data: &#039;name&#039;},
    {targets: 1, data: &#039;position&#039;},
    {targets: 2, data: &#039;actions&#039;},
  ],
});

// Delete at specified position; the second row is deleted.
myTable.deleteRow(1);

// Specify a row element to delete.
$(&#039;#myTable tbody&#039;).on(&#039;click&#039;, &#039;[data-on-delete]&#039;, evnt =&gt; {
  // Get selection row.
  const row = evnt.currentTarget.closest(&#039;tr&#039;);

  // Delete row.
  myTable.deleteRow(row);
});</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                </div>
                <!--end::Tab content-->
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public updateRow()</code>
            </td>
            <td>
              Update row.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>rowSelector: any</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Row selector. See <a href="https://datatables.net/reference/type/row-selector" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>data: any[]|object</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Data source object for the data source of the row. This will be an array if you use DOM sourced data, otherwise it will be the array / object / instance that is used to populate the table with data.
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>redraw: boolean</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Reloads the table data after updating a row if true, otherwise does not. Default is true.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>Datatable</code></li>
              </ul>
              <!--end::Return-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <ul class="nav nav-pills" role="tablist">
                  <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#update-row-html-tab" role="tab">HTML</a></li>
                  <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#update-row-js-tab" role="tab">JAVASCRIPT</a></li>
                </ul>
                <!--begin::Tab content-->
                <div class="tab-content">
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade show active" id="update-row-html-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-html">
                        <code class="language-html">&lt;table id=&quot;myTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
      &lt;th&gt;#&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Airi Satou&lt;/td&gt;
      &lt;td&gt;Accountant&lt;/td&gt;
      &lt;td&gt;&lt;button data-on-update class=&quot;btn btn-primary&quot;&gt;Update name&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Angelica Ramos&lt;/td&gt;
      &lt;td&gt;Chief Executive Officer (CEO)&lt;/td&gt;
      &lt;td&gt;&lt;button data-on-update class=&quot;btn btn-primary&quot;&gt;Update name&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade" id="update-row-js-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-javascript">
                        <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

// Initialize DataTable.
const myTable = new components.Datatable(document.getElementById(&#039;myTable&#039;), {
  columnDefs: [
    {targets: 0, data: &#039;name&#039;},
    {targets: 1, data: &#039;position&#039;},
    {targets: 2, data: &#039;actions&#039;},
  ],
});

// Update button click event.
$(&#039;#myTable tbody&#039;).on(&#039;click&#039;, &#039;[data-on-update]&#039;, evnt =&gt; {
  // Display name input dialog.
	const name = window.prompt(&#039;Please enter a new name.&#039;);
  if (!name)
    // Cancel input or do nothing if input is empty.
    return;

  // Get selection row.
  const row = evnt.currentTarget.closest(&#039;tr&#039;);

  // Update the name column of row.
  myTable.updateRow(row, {name}, false);
});</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                </div>
                <!--end::Tab content-->
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public getRowData()</code>
            </td>
            <td>
              Get single row or all rows of data
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>rowSelector: any</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Row selector. See <a href="https://datatables.net/reference/type/row-selector" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>any[]|object</code> Row data.</li>
              </ul>
              <!--end::Return-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <ul class="nav nav-pills" role="tablist">
                  <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#get-row-data-html-tab" role="tab">HTML</a></li>
                  <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#get-row-data-js-tab" role="tab">JAVASCRIPT</a></li>
                </ul>
                <!--begin::Tab content-->
                <div class="tab-content">
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade show active" id="get-row-data-html-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-html">
                        <code class="language-html">&lt;table id=&quot;myTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Airi Satou&lt;/td&gt;
      &lt;td&gt;Accountant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Angelica Ramos&lt;/td&gt;
      &lt;td&gt;Chief Executive Officer (CEO)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                  <!--begin::Tab panel-->
                  <div class="tab-pane fade" id="get-row-data-js-tab" role="tabpanel">
                    <div class="highlight-code">
                      <pre class="language-javascript">
                        <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

// Initialize DataTable.
const myTable = new components.Datatable(document.getElementById(&#039;myTable&#039;), {
  columnDefs: [
    {targets: 0, data: &#039;name&#039;},
    {targets: 1, data: &#039;position&#039;},
  ],
});

// Retrieve the first row of data.
// The result is &quot;{name: &#039;Airi Satou&#039;, position: &#039;Accountant&#039;}&quot;.
const row = myTable.getRowData(0);

// Get all row data.
// The retrieved result is &quot;[{name: &#039;Airi Satou&#039;, position: &#039;Accountant&#039;}, {name: &#039;Angelica Ramos&#039;, position: &#039;Chief Executive Officer (CEO)&#039;}]&quot;.
const rows = myTable.getRowData();</code>
                      </pre>
                    </div>
                  </div>
                  <!--end::Tab panel-->
                </div>
                <!--end::Tab content-->
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public getRowCount()</code>
            </td>
            <td>
              Get the number of rows.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>rowSelector: any|undefined</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Row selector. See <a href="https://datatables.net/reference/type/row-selector" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>number</code> Number of rows.</li>
              </ul>
              <!--end::Return-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <div class="highlight-code">
                  <pre class="language-javascript">
                    <code class="language-javascript">// Get the number of rows for which the &quot;.select&quot; CSS class is set.
myTable.getRowCount(&#039;.selected&#039;);

// Get the number of all rows.
myTable.getRowCount();</code>
                  </pre>
                </div>
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public getRowNodes()</code>
            </td>
            <td>
              Get row HTML elements.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>HTMLTableRowElement[]</code> HTML elements of row.</li>
              </ul>
              <!--end::Return-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public getRowObject()</code>
            </td>
            <td>
              Get the DataTable API instance containing the selected rows.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>rowSelector: any</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Row selector. See <a href="https://datatables.net/reference/type/row-selector" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>DataTables.RowsMethods</code> DataTable API instance containing the selected rows.</li>
              </ul>
              <!--end::Return-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public column()</code>
            </td>
            <td>
              Select the column found by a the column selector.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>columnSelector: any</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Column selector. See <a href="https://datatables.net/reference/type/column-selector" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>modifier?: DataTables.ObjectSelectorModifier|undefined</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    Specifies the order, paging, and filtering status of the selected columns. Default is none (undefined). See <a href="https://datatables.net/reference/type/selector-modifier" target="_blank">here</a> for more information.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>DataTables.ColumnMethods</code> DataTable API instance with selected column in the result set.</li>
              </ul>
              <!--end::Return-->
            </td>
          </tr>
          <tr>
            <td>
              <code>public clear()</code>
            </td>
            <td>
              Clear the table of all data.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Return value:</div>
              <!--end::Heading-->
              <!--begin::Return-->
              <ul class="list-style-none">
                <li class="py-2"><code>Datatable</code></li>
              </ul>
              <!--end::Return-->
            </td>
          </tr>
          <tr>
            <td>
              <code>protected ajaxErrorHook()</code>
            </td>
            <td>
              Hook function called when an error occurs in an Ajax request to retrieve table data that can be implemented in a subclass.<br>
              This method receives an HTTP status code and an XMLHttpRequest object.
              <!--begin::Heading-->
              <div class="py-3 text-gray-700">Parameters:</div>
              <!--end::Heading-->
              <!--begin::Parameters-->
              <ul>
                <li class="py-2"><code>httpStatusCode: number</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    HTTP status code.
                  </div>
                  <!--end::Block-->
                </li>
                <li class="py-2"><code>xhr: XMLHttpRequest</code>
                  <!--begin::Block-->
                  <div class="pt-3">
                    XMLHttpRequest object.
                  </div>
                  <!--end::Block-->
                </li>
              </ul>
              <!--end::Parameters-->
              <!--begin::Highlight-->
              <div class="highlight">
                <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
                <div class="highlight-code">
                  <pre class="language-javascript">
                    <code class="language-javascript">ajaxErrorHook(httpStatusCode, xhr) {
  if (httpStatusCode === 403)
    // Redirect in case of authentication error (403).
    location.replace(&#039;/&#039;);
}</code>
                  </pre>
                </div>
              </div>
              <!--end::Highlight-->
            </td>
          </tr>
        </tbody>
        <!--end::Body-->
      </table>
      <!--end::Table-->
    </div>
    <!--end::Table wrapper-->
    <!--begin::Heading-->
    <div class="fs-2 py-5">Instance Properties</div>
    <!--end::Heading-->
    <!--begin::Table wrapper-->
    <div class="table-responsive">
      <!--begin::Table-->
      <table class="table table-row-bordered mb-0 gy-5">
        <!--begin::Head-->
        <thead>
          <tr class="p-6">
            <th class="min-w-250px">Name</th>
            <th>Description</th>
          </tr>
        </thead>
        <!--end::Head-->
        <!--begin::Body-->
        <tbody>
          <tr>
            <td>
              <code>public api: DataTables.Api</code>
            </td>
            <td>
              DataTables.Api instance. This is read-only.
            </td>
          </tr>
        </tbody>
        <!--end::Body-->
      </table>
      <!--end::Table-->
    </div>
    <!--end::Table wrapper-->
  </div>
  <!--end::Block-->
</div>
<!--end::Section-->
<!--begin::Section-->
<div class="py-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="basic" data-kt-scroll-offset="100">
    <a href="#basic"></a>Basic
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">
    Simple DataTable with no server-side processing.<br>
    DataTable has most features enabled by default, so all you need to do to use it with your own tables is to call the construction function.
  </div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="my-5">
    <div class="demonstration-block">
      <!--begin::Wrapper-->
      <div class="d-flex flex-stack flex-wrap mb-5">
        <!--begin::Search-->
        <div class="d-flex align-items-center position-relative my-1 mb-2 mb-md-0">
          <!--begin::Svg Icon | path: icons/duotune/general/gen021.svg-->
          <span class="svg-icon svg-icon-1 position-absolute ms-4">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect opacity="0.5" x="17.0365" y="15.1223" width="8.15546" height="2" rx="1" transform="rotate(45 17.0365 15.1223)" fill="currentColor" />
              <path d="M11 19C6.55556 19 3 15.4444 3 11C3 6.55556 6.55556 3 11 3C15.4444 3 19 6.55556 19 11C19 15.4444 15.4444 19 11 19ZM11 5C7.53333 5 5 7.53333 5 11C5 14.4667 7.53333 17 11 17C14.4667 17 17 14.4667 17 11C17 7.53333 14.4667 5 11 5Z" fill="currentColor" />
            </svg>
          </span>
          <!--end::Svg Icon-->
          <input data-ref="basicTableKeyword" data-on-search-basic-table type="text" class="form-control form-control-solid w-300px ps-15" placeholder="Search by name" maxlength="70" />
        </div>
        <!--end::Search-->
      </div>
      <!--end::Wrapper-->
      <!--begin::Datatable-->
      <table data-ref="basicTable" class="table table-row-bordered gy-5">
        <thead>
          <tr class="text-start text-gray-700 fw-bold fs-7 gs-0">
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Age</th>
            <th>Start date</th>
            <th>Salary</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Tiger Nixon</td>
            <td>System Architect</td>
            <td>Edinburgh</td>
            <td>61</td>
            <td>2011/04/25</td>
            <td>320800</td>
          </tr>
          <tr>
            <td>Garrett Winters</td>
            <td>Accountant</td>
            <td>Tokyo</td>
            <td>63</td>
            <td>2011/07/25</td>
            <td>170750</td>
          </tr>
          <tr>
            <td>Ashton Cox</td>
            <td>Junior Technical Author</td>
            <td>San Francisco</td>
            <td>66</td>
            <td>2009/01/12</td>
            <td>86000</td>
          </tr>
          <tr>
            <td>Cedric Kelly</td>
            <td>Senior Javascript Developer</td>
            <td>Edinburgh</td>
            <td>22</td>
            <td>2012/03/29</td>
            <td>433060</td>
          </tr>
        </tbody>
      </table>
      <!--end::Datatable-->
    </div>
  </div>
  <!--end::Block-->
  <!--begin::Code-->
  <div class="my-5">
    <!--begin::Highlight-->
    <div class="highlight">
      <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
      <ul class="nav nav-pills" role="tablist">
        <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#basic-html-tab" role="tab">HTML</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#basic-js-tab" role="tab">JAVASCRIPT</a></li>
      </ul>
      <!--begin::Tab content-->
      <div class="tab-content">
        <!--begin::Tab panel-->
        <div class="tab-pane fade show active" id="basic-html-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-html">
              <code class="language-html">&lt;!--begin::Wrapper--&gt;
&lt;div class=&quot;d-flex flex-stack flex-wrap mb-5&quot;&gt;
  &lt;!--begin::Search--&gt;
  &lt;div class=&quot;d-flex align-items-center position-relative my-1 mb-2 mb-md-0&quot;&gt;
    &lt;!--begin::Svg Icon | path: icons/duotune/general/gen021.svg--&gt;
    &lt;span class=&quot;svg-icon svg-icon-1 position-absolute ms-4&quot;&gt;
      &lt;svg width=&quot;24&quot; height=&quot;24&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
        &lt;rect opacity=&quot;0.5&quot; x=&quot;17.0365&quot; y=&quot;15.1223&quot; width=&quot;8.15546&quot; height=&quot;2&quot; rx=&quot;1&quot; transform=&quot;rotate(45 17.0365 15.1223)&quot; fill=&quot;currentColor&quot; /&gt;
        &lt;path d=&quot;M11 19C6.55556 19 3 15.4444 3 11C3 6.55556 6.55556 3 11 3C15.4444 3 19 6.55556 19 11C19 15.4444 15.4444 19 11 19ZM11 5C7.53333 5 5 7.53333 5 11C5 14.4667 7.53333 17 11 17C14.4667 17 17 14.4667 17 11C17 7.53333 14.4667 5 11 5Z&quot; fill=&quot;currentColor&quot; /&gt;
      &lt;/svg&gt;
    &lt;/span&gt;
    &lt;!--end::Svg Icon--&gt;
    &lt;input data-ref=&quot;basicTableKeyword&quot; data-on-search-basic-table type=&quot;text&quot; class=&quot;form-control form-control-solid w-300px ps-15&quot; placeholder=&quot;Search by name&quot; maxlength=&quot;70&quot; /&gt;
  &lt;/div&gt;
  &lt;!--end::Search--&gt;
&lt;/div&gt;
&lt;!--end::Wrapper--&gt;
&lt;!--begin::Datatable--&gt;
&lt;table data-ref=&quot;basicTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
      &lt;th&gt;Office&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Start date&lt;/th&gt;
      &lt;th&gt;Salary&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Tiger Nixon&lt;/td&gt;
      &lt;td&gt;System Architect&lt;/td&gt;
      &lt;td&gt;Edinburgh&lt;/td&gt;
      &lt;td&gt;61&lt;/td&gt;
      &lt;td&gt;2011/04/25&lt;/td&gt;
      &lt;td&gt;320800&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Garrett Winters&lt;/td&gt;
      &lt;td&gt;Accountant&lt;/td&gt;
      &lt;td&gt;Tokyo&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;2011/07/25&lt;/td&gt;
      &lt;td&gt;170750&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ashton Cox&lt;/td&gt;
      &lt;td&gt;Junior Technical Author&lt;/td&gt;
      &lt;td&gt;San Francisco&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;2009/01/12&lt;/td&gt;
      &lt;td&gt;86000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cedric Kelly&lt;/td&gt;
      &lt;td&gt;Senior Javascript Developer&lt;/td&gt;
      &lt;td&gt;Edinburgh&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;2012/03/29&lt;/td&gt;
      &lt;td&gt;433060&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;!--end::Datatable--&gt;</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="basic-js-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

function initBasicTable() {
  return new components.Datatable(ref.basicTable, {
    columnDefs: [
      {targets: 0, data: &#039;name&#039;, name: &#039;name&#039;},
      {targets: 1, data: &#039;position&#039;, name: &#039;position&#039;},
      {targets: 2, data: &#039;office&#039;, name: &#039;office&#039;},
      {targets: 3, data: &#039;age&#039;, name: &#039;age&#039;},
      {targets: 4, data: &#039;startDate&#039;, name: &#039;startDate&#039;},
      {targets: 5, data: &#039;salary&#039;, name: &#039;salary&#039;},
    ],
    pageLength: 3
  });
}

function initBasicTableSearchForm() {
  $(&#039;body&#039;).on(&#039;input&#039;, &#039;[data-on-search-basic-table]&#039;, () =&gt; {
    // Filter data by keyword.
    basicTable.filter(&#039;name:name&#039;, ref.basicTableKeyword.val());
  });
}

// Search for elements.
const ref = components.selectRef();

// Initialize DataTable.
const basicTable = initBasicTable();

// Initialize events, etc.
initBasicTableSearchForm();</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
      </div>
      <!--end::Tab content-->
    </div>
    <!--end::Highlight-->
  </div>
  <!--end::Code-->
</div>
<!--end::Section-->
<!--begin::Section-->
<div class="pb-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="server-side-processing" data-kt-scroll-offset="100">
    <a href="#server-side-processing"></a>Server-side processing
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">
    {{> requires-server-side-process}}
  </div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="my-5">
    <div class="demonstration-block">
      <!--begin::Wrapper-->
      <div class="d-flex flex-stack flex-wrap mb-5">
        <!--begin::Search-->
        <div class="d-flex align-items-center position-relative my-1 mb-2 mb-md-0">
          <!--begin::Svg Icon | path: icons/duotune/general/gen021.svg-->
          <span class="svg-icon svg-icon-1 position-absolute ms-4">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect opacity="0.5" x="17.0365" y="15.1223" width="8.15546" height="2" rx="1" transform="rotate(45 17.0365 15.1223)" fill="currentColor" />
              <path d="M11 19C6.55556 19 3 15.4444 3 11C3 6.55556 6.55556 3 11 3C15.4444 3 19 6.55556 19 11C19 15.4444 15.4444 19 11 19ZM11 5C7.53333 5 5 7.53333 5 11C5 14.4667 7.53333 17 11 17C14.4667 17 17 14.4667 17 11C17 7.53333 14.4667 5 11 5Z" fill="currentColor" />
            </svg>
          </span>
          <!--end::Svg Icon-->
          <input data-ref="serverSideProcessingTableKeyword" data-on-search-server-side-processing-table type="text" class="form-control form-control-solid w-300px ps-15" placeholder="Search by name" maxlength="70" />
        </div>
        <!--end::Search-->
      </div>
      <!--end::Wrapper-->
      <!--begin::Datatable-->
      <table data-ref="serverSideProcessingTable" class="table table-row-bordered gy-5">
        <thead>
          <tr class="text-start text-gray-700 fw-bold fs-7 gs-0">
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Age</th>
            <th>Start date</th>
            <th>Salary</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <!--end::Datatable-->
    </div>
  </div>
  <!--end::Block-->
  <!--begin::Code-->
  <div class="py-5">
    <!--begin::Highlight-->
    <div class="highlight">
      <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
      <ul class="nav nav-pills" role="tablist">
        <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#server-side-processing-html-tab" role="tab">HTML</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#server-side-processing-js-tab" role="tab">JAVASCRIPT</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#server-side-processing-ajax-tab" role="tab">AJAX</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#server-side-processing-route-tab" role="tab">SERVER-SIDE ROUTE JS</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#server-side-processing-model-tab" role="tab">SERVER-SIDE MODEL JS</a></li>
      </ul>
      <!--begin::Tab content-->
      <div class="tab-content">
        <!--begin::Tab panel-->
        <div class="tab-pane fade show active" id="server-side-processing-html-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-html">
              <code class="language-html">&lt;!--begin::Wrapper--&gt;
&lt;div class=&quot;d-flex flex-stack flex-wrap mb-5&quot;&gt;
  &lt;!--begin::Search--&gt;
  &lt;div class=&quot;d-flex align-items-center position-relative my-1 mb-2 mb-md-0&quot;&gt;
    &lt;!--begin::Svg Icon | path: icons/duotune/general/gen021.svg--&gt;
    &lt;span class=&quot;svg-icon svg-icon-1 position-absolute ms-4&quot;&gt;
      &lt;svg width=&quot;24&quot; height=&quot;24&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
        &lt;rect opacity=&quot;0.5&quot; x=&quot;17.0365&quot; y=&quot;15.1223&quot; width=&quot;8.15546&quot; height=&quot;2&quot; rx=&quot;1&quot; transform=&quot;rotate(45 17.0365 15.1223)&quot; fill=&quot;currentColor&quot; /&gt;
        &lt;path d=&quot;M11 19C6.55556 19 3 15.4444 3 11C3 6.55556 6.55556 3 11 3C15.4444 3 19 6.55556 19 11C19 15.4444 15.4444 19 11 19ZM11 5C7.53333 5 5 7.53333 5 11C5 14.4667 7.53333 17 11 17C14.4667 17 17 14.4667 17 11C17 7.53333 14.4667 5 11 5Z&quot; fill=&quot;currentColor&quot; /&gt;
      &lt;/svg&gt;
    &lt;/span&gt;
    &lt;!--end::Svg Icon--&gt;
    &lt;input data-ref=&quot;serverSideProcessingTableKeyword&quot; data-on-search-server-side-processing-table type=&quot;text&quot; class=&quot;form-control form-control-solid w-300px ps-15&quot; placeholder=&quot;Search by name&quot; maxlength=&quot;70&quot; /&gt;
  &lt;/div&gt;
  &lt;!--end::Search--&gt;
&lt;/div&gt;
&lt;!--end::Wrapper--&gt;
&lt;!--begin::Datatable--&gt;
&lt;table data-ref=&quot;serverSideProcessingTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
      &lt;th&gt;Office&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Start date&lt;/th&gt;
      &lt;th&gt;Salary&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--end::Datatable--&gt;</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="server-side-processing-js-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

function initServerSideProcessingTable() {
  return new components.Datatable(ref.serverSideProcessingTable, {
    ajax: {
      url: &#039;/api/persons/pages&#039;,
      data: d =&gt; {
        d.search = {keyword: ref.serverSideProcessingTableKeyword.val()};
      }
    },
    columnDefs: [
      {targets: 0, data: &#039;name&#039;},
      {targets: 1, data: &#039;position&#039;},
      {targets: 2, data: &#039;office&#039;},
      {targets: 3, data: &#039;age&#039;},
      {targets: 4, data: &#039;startDate&#039;},
      {targets: 5, data: &#039;salary&#039;},
    ],
    pageLength: 3
  });
}

function initServerSideProcessingTableSearchForm() {
  $(&#039;body&#039;).on(&#039;input&#039;, &#039;[data-on-search-server-side-processing-table]&#039;, () =&gt; {
    // Reload when the filter is changed.
    // The filter information is set in the parameters sent to the server from the ajax.data optional function.
    serverSideProcessingTable.reload();
  })
}

// Search for elements.
const ref = components.selectRef();

// Initialize DataTable.
const serverSideProcessingTable = initServerSideProcessingTable();

// Initialize events, etc.
initServerSideProcessingTableSearchForm();</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="server-side-processing-ajax-tab" role="tabpanel">
          <!--begin::Block-->
          <div class="py-5">This table loads data by Ajax. The latest data that has been loaded is shown below. This data will update automatically as any additional data is loaded.</div>
          <!--end::Block-->
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">{
  &quot;data&quot;: [
    {
      &quot;id&quot;: 5,
      &quot;name&quot;: &quot;Airi Satou&quot;,
      &quot;position&quot;: &quot;Accountant&quot;,
      &quot;office&quot;: &quot;Tokyo&quot;,
      &quot;age&quot;: 33,
      &quot;startDate&quot;: &quot;2008-11-28&quot;,
      &quot;salary&quot;: 162700
    },
    {
      &quot;id&quot;: 25,
      &quot;name&quot;: &quot;Angelica Ramos&quot;,
      &quot;position&quot;: &quot;Chief Executive Officer (CEO)&quot;,
      &quot;office&quot;: &quot;London&quot;,
      &quot;age&quot;: 47,
      &quot;startDate&quot;: &quot;2009-10-09&quot;,
      &quot;salary&quot;: 1200000
    },
    {
      &quot;id&quot;: 3,
      &quot;name&quot;: &quot;Ashton Cox&quot;,
      &quot;position&quot;: &quot;Junior Technical Author&quot;,
      &quot;office&quot;: &quot;San Francisco&quot;,
      &quot;age&quot;: 66,
      &quot;startDate&quot;: &quot;2009-01-12&quot;,
      &quot;salary&quot;: 86000
    }
  ],
  &quot;recordsTotal&quot;: 57,
  &quot;recordsFiltered&quot;: 57,
  &quot;draw&quot;: &quot;1&quot;
}</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="server-side-processing-route-tab" role="tabpanel">
          <!--begin::Block-->
          <div class="py-5">
            This is a route script used in server-side processing created with <a href="https://takuya-motoshima.github.io/express-sweet/" target="_blank">express-sweet</a>, which extends Node.js express.<br>
            Server-side processing scripts can be written in any language, using <a href="//datatables.net/manual/server-side" target="_blank">the protocol described in the DataTables documentation</a>.
          </div>
          <!--end::Block-->
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">const router = require(&#039;express&#039;).Router();
const {query, validationResult} = require(&#039;express-validator&#039;);
const PersonModel = require(&#039;../../models/PersonModel&#039;);

// Get person page data.
router.get(&#039;/pages&#039;, [
  // Validate parameters.
  query(&#039;start&#039;).not().isEmpty().isInt({min: 0}),
  query(&#039;length&#039;).not().isEmpty().isInt({min: 1}),
  query(&#039;order&#039;).not().isEmpty().isIn([&#039;name&#039;, &#039;position&#039;, &#039;office&#039;, &#039;age&#039;, &#039;startDate&#039;, &#039;salary&#039;]),
  query(&#039;dir&#039;).not().isEmpty().isIn([&#039;asc&#039;, &#039;desc&#039;]),
  query(&#039;search.keyword&#039;).trim().optional({nullable: true, checkFalsy: true}).isLength({max: 70}),
  query(&#039;draw&#039;).not().isEmpty().isInt({min: 1}),
], async (req, res) =&gt; {
  // Check validation results.
  const result = validationResult(req);
  if (!result.isEmpty())
    // If the parameter is invalid, a 400 error is returned.
    return void res.status(400).end();

  // Get page data.
  const paginate = await PersonModel.paginate(req.query);

  // Set the received drawing count as-is in the response.
  paginate.draw = req.query.draw;
  res.json(paginate);
});

module.exports = router;</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="server-side-processing-model-tab" role="tabpanel">
          <!--begin::Block-->
          <div class="py-5">
            This is a Model script used in server-side processing created with <a href="https://takuya-motoshima.github.io/express-sweet/" target="_blank">express-sweet</a>, which extends Node.js express.
          </div>
          <!--end::Block-->
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">const Model = require(&#039;express-sweet&#039;).database.Model;
const {merge} = require(&#039;deep-fusion&#039;);

module.exports = class extends Model {
  static get table() {
    return &#039;person&#039;;
  }

  static get attributes() {
    return {
      id: {
        type: this.DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      name: this.DataTypes.STRING,
      position: this.DataTypes.STRING,
      office: this.DataTypes.STRING,
      age: this.DataTypes.INTEGER,
      startDate: this.DataTypes.DATE,
      salary: this.DataTypes.DECIMAL(10, 2),
    };
  }

  /**
   * Get page data.
   */
  static async paginate(options) {
    // Initialize options.
    options = merge({
      start: 0,
      length: 30,
      order: &#039;name&#039;,
      dir: &#039;asc&#039;,
      search: {
        keyword: null,
      },
    }, options);

    // Filter conditions.
    const where = {};
    if (options.search.keyword)
      where.name = {[super.Op.like]: `%${options.search.keyword}%`};

    // Get page data.
    const data = await super.findAll({
      where,
      offset: parseInt(options.start, 10),
      limit: parseInt(options.length, 10),
      order: [super.literal(`${options.order} ${options.dir}`)],
      raw: true,
    });

    // Get the total number of records.
    const recordsTotal = await super.count();

    // Get the number of filtered records.
    const recordsFiltered = await super.count({where});
    return {data, recordsTotal, recordsFiltered};
  }
}</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
      </div>
      <!--end::Tab content-->
    </div>
    <!--end::Highlight-->
  </div>
  <!--end::Code-->
</div>
<!--end::Section-->
<!--begin::Section-->
<div class="py-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="column-visibility" data-kt-scroll-offset="100">
    <a href="#column-visibility"></a>Column visibility integration
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">This example shows how to show/hide table columns using the <a href="https://datatables.net/reference/button/colvis" target="_blank">colvis plugin</a>.</div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="my-5">
    <div class="demonstration-block">
      <!--begin::Datatable-->
      <table data-ref="columnVisibilityTable" class="table table-row-bordered gy-5">
        <thead>
          <tr class="text-start text-gray-700 fw-bold fs-7 gs-0">
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Age</th>
            <th>Start date</th>
            <th>Salary</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Tiger Nixon</td>
            <td>System Architect</td>
            <td>Edinburgh</td>
            <td>61</td>
            <td>2011/04/25</td>
            <td>320800</td>
          </tr>
          <tr>
            <td>Garrett Winters</td>
            <td>Accountant</td>
            <td>Tokyo</td>
            <td>63</td>
            <td>2011/07/25</td>
            <td>170750</td>
          </tr>
          <tr>
            <td>Ashton Cox</td>
            <td>Junior Technical Author</td>
            <td>San Francisco</td>
            <td>66</td>
            <td>2009/01/12</td>
            <td>86000</td>
          </tr>
          <tr>
            <td>Cedric Kelly</td>
            <td>Senior Javascript Developer</td>
            <td>Edinburgh</td>
            <td>22</td>
            <td>2012/03/29</td>
            <td>433060</td>
          </tr>
        </tbody>
      </table>
      <!--end::Datatable-->
    </div>
  </div>
  <!--end::Block-->
  <!--begin::Code-->
  <div class="py-5">
    <!--begin::Highlight-->
    <div class="highlight">
      <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
      <ul class="nav nav-pills" role="tablist">
        <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#column-visibility-html-tab" role="tab">HTML</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#column-visibility-js-tab" role="tab">JAVASCRIPT</a></li>
      </ul>
      <!--begin::Tab content-->
      <div class="tab-content">
        <!--begin::Tab panel-->
        <div class="tab-pane fade show active" id="column-visibility-html-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-html">
              <code class="language-html">&lt;!--begin::Datatable--&gt;
&lt;table data-ref=&quot;columnVisibilityTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
      &lt;th&gt;Office&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Start date&lt;/th&gt;
      &lt;th&gt;Salary&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Tiger Nixon&lt;/td&gt;
      &lt;td&gt;System Architect&lt;/td&gt;
      &lt;td&gt;Edinburgh&lt;/td&gt;
      &lt;td&gt;61&lt;/td&gt;
      &lt;td&gt;2011/04/25&lt;/td&gt;
      &lt;td&gt;320800&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Garrett Winters&lt;/td&gt;
      &lt;td&gt;Accountant&lt;/td&gt;
      &lt;td&gt;Tokyo&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;2011/07/25&lt;/td&gt;
      &lt;td&gt;170750&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ashton Cox&lt;/td&gt;
      &lt;td&gt;Junior Technical Author&lt;/td&gt;
      &lt;td&gt;San Francisco&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;2009/01/12&lt;/td&gt;
      &lt;td&gt;86000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cedric Kelly&lt;/td&gt;
      &lt;td&gt;Senior Javascript Developer&lt;/td&gt;
      &lt;td&gt;Edinburgh&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;2012/03/29&lt;/td&gt;
      &lt;td&gt;433060&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;!--end::Datatable--&gt;</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="column-visibility-js-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

function initColumnVisibilityTable() {
  return new components.Datatable(ref.columnVisibilityTable, {
    dom: `&lt;&#039;row align-items-center&#039;&lt;&#039;col-auto&#039;B&gt;&lt;&#039;col dataTables_pager&#039;p&gt;&gt;&lt;&#039;row&#039;&lt;&#039;col-12&#039;tr&gt;&gt;&lt;&#039;row&#039;&lt;&#039;col-12 dataTables_pager&#039;p&gt;&gt;`,
    columnDefs: [
      {targets: 0, data: &#039;name&#039;},
      {targets: 1, data: &#039;position&#039;},
      {targets: 2, data: &#039;office&#039;},
      {targets: 3, data: &#039;age&#039;},
      {targets: 4, data: &#039;startDate&#039;},
      {targets: 5, data: &#039;salary&#039;},
    ],
    pageLength: 3,
    buttons: [
      {
        extend: &#039;colvis&#039;,
        text: &#039;Show / hide columns&#039;,
        // Columns selector that defines the columns to include in the column visibility button set.
        // CSS selectors, column indexes, etc. can be used to specify columns to switch visibility.
        columns: &#039;:eq(1),:eq(2),:eq(3),:eq(4),:eq(5)&#039;,
        // columns: [1,2,3,4,5],
      }
    ],
    stateSave: true,// Save the column visibility in the browser.
    stateSaveParams: (_, data) =&gt; {
      // This option allows for the saving of the search applied to individual columns to be enabled or disabled.
      delete data.columns.search;

      // This option allows for the saving of the visibility of the columns to be enabled or disabled.
      // delete data.columns.visible;

      // This option allows for the saving of the page length to be enabled or disabled.
      delete data.length;

      // This option allows for the saving of the tables column sorting to be enabled or disabled.
      delete data.order;

      // This option allows for the saving of the paging to be enabled or disabled.
      delete data.paging;

      // This option allows for the saving of the scroller position to be enabled or disabled.
      delete data.scroller;

      // This option allows for the saving of the search to be enabled or disabled.
      delete data.search;

      // This option allows for the saving of the searchBuilder state to be enabled or disabled. 
      delete data.searchBuilder;

      // This option allows for the saving of the searchPanes state to be enabled or disabled. 
      delete data.searchPanes;

      // This option allows for the saving of the select state to be enabled or disabled.
      delete data.select;
    }
  });
}

// Search for elements.
const ref = components.selectRef();

// Initialize DataTable.
const columnVisibilityTable = initColumnVisibilityTable();</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
      </div>
      <!--end::Tab content-->
    </div>
    <!--end::Highlight-->
  </div>
  <!--end::Code-->
</div>
<!--end::Section-->
<!--begin::Section-->
<div class="py-10">
  <!--begin::Heading-->
  <h1 class="anchor fw-bold mb-5" id="disable-first-ajax-call" data-kt-scroll-offset="100">
    <a href="#disable-first-ajax-call"></a>Disable first ajax call
  </h1>
  <!--end::Heading-->
  <!--begin::Block-->
  <div class="py-5">
    In this example, the Ajax call for the initial table data retrieval is disabled and Ajax is called to load the data when the button is pressed.<br>
    Setting the <code>firstAjax</code> option to false in the <code>DataTable</code> constructor disables the initial Ajax call.
  </div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="py-5">
    {{> requires-server-side-process}}
  </div>
  <!--end::Block-->
  <!--begin::Block-->
  <div class="my-5">
    <div class="demonstration-block">
      <!--begin::Wrapper-->
      <div class="d-flex flex-stack flex-wrap mb-5">
        <!--begin::Toolbar-->
        <div class="d-flex justify-content-end">
          <button data-on-load-disable-first-ajax-call-table type="button" class="btn btn-primary">Call Ajax to load data</button>
        </div>
        <!--end::Toolbar-->
      </div>
      <!--end::Wrapper-->
      <!--begin::Datatable-->
      <table data-ref="disableFirstAjaxCallTable" class="table table-row-bordered gy-5">
        <thead>
          <tr class="text-start text-gray-700 fw-bold fs-7 gs-0">
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Age</th>
            <th>Start date</th>
            <th>Salary</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <!--end::Datatable-->
    </div>
  </div>
  <!--end::Block-->
  <!--begin::Code-->
  <div class="py-5">
    <!--begin::Highlight-->
    <div class="highlight">
      <button class="highlight-copy btn" data-bs-toggle="tooltip" title="Copy code">copy</button>
      <ul class="nav nav-pills" role="tablist">
        <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#disable-first-ajax-call-html-tab" role="tab">HTML</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#disable-first-ajax-call-js-tab" role="tab">JAVASCRIPT</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#disable-first-ajax-call-route-tab" role="tab">SERVER-SIDE ROUTE JS</a></li>
        <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#disable-first-ajax-call-model-tab" role="tab">SERVER-SIDE MODEL JS</a></li>
      </ul>
      <!--begin::Tab content-->
      <div class="tab-content">
        <!--begin::Tab panel-->
        <div class="tab-pane fade show active" id="disable-first-ajax-call-html-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-html">
              <code class="language-html">&lt;!--begin::Wrapper--&gt;
&lt;div class=&quot;d-flex flex-stack flex-wrap mb-5&quot;&gt;
  &lt;!--begin::Toolbar--&gt;
  &lt;div class=&quot;d-flex justify-content-end&quot;&gt;
    &lt;button data-on-load-disable-first-ajax-call-table type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Call Ajax to load data&lt;/button&gt;
  &lt;/div&gt;
  &lt;!--end::Toolbar--&gt;
&lt;/div&gt;
&lt;!--end::Wrapper--&gt;
&lt;!--begin::Datatable--&gt;
&lt;table data-ref=&quot;disableFirstAjaxCallTable&quot; class=&quot;table table-row-bordered gy-5&quot;&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;text-start text-gray-700 fw-bold fs-7 gs-0&quot;&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Position&lt;/th&gt;
      &lt;th&gt;Office&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Start date&lt;/th&gt;
      &lt;th&gt;Salary&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--end::Datatable--&gt;</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="disable-first-ajax-call-js-tab" role="tabpanel">
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">import {components} from &#039;metronic-extension&#039;;

function initDisableFirstAjaxCallTable() {
  return new components.Datatable(ref.disableFirstAjaxCallTable, {
    firstAjax: false,
    ajax: &#039;/api/persons/pages&#039;,
    columnDefs: [
      {targets: 0, data: &#039;name&#039;},
      {targets: 1, data: &#039;position&#039;},
      {targets: 2, data: &#039;office&#039;},
      {targets: 3, data: &#039;age&#039;},
      {targets: 4, data: &#039;startDate&#039;},
      {targets: 5, data: &#039;salary&#039;},
    ],
    pageLength: 3
  });
}

function initDisableFirstAjaxCallTableForm() {
  $(&#039;body&#039;).on(&#039;click&#039;, &#039;[data-on-load-disable-first-ajax-call-table]&#039;, () =&gt; disableFirstAjaxCallTable.reload());
}

// Search for elements.
const ref = components.selectRef();

// Initialize DataTable.
const disableFirstAjaxCallTable = initDisableFirstAjaxCallTable();

// Initialize events, etc.
initDisableFirstAjaxCallTableForm();</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="disable-first-ajax-call-route-tab" role="tabpanel">
          <!--begin::Block-->
          <div class="py-5">
            This is a route script used in server-side processing created with <a href="https://takuya-motoshima.github.io/express-sweet/" target="_blank">express-sweet</a>, which extends Node.js express.<br>
            Server-side processing scripts can be written in any language, using <a href="//datatables.net/manual/server-side" target="_blank">the protocol described in the DataTables documentation</a>.
          </div>
          <!--end::Block-->
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">const router = require(&#039;express&#039;).Router();
const {query, validationResult} = require(&#039;express-validator&#039;);
const PersonModel = require(&#039;../../models/PersonModel&#039;);

// Get person page data.
router.get(&#039;/pages&#039;, [
  // Validate parameters.
  query(&#039;start&#039;).not().isEmpty().isInt({min: 0}),
  query(&#039;length&#039;).not().isEmpty().isInt({min: 1}),
  query(&#039;order&#039;).not().isEmpty().isIn([&#039;name&#039;, &#039;position&#039;, &#039;office&#039;, &#039;age&#039;, &#039;startDate&#039;, &#039;salary&#039;]),
  query(&#039;dir&#039;).not().isEmpty().isIn([&#039;asc&#039;, &#039;desc&#039;]),
  query(&#039;search.keyword&#039;).trim().optional({nullable: true, checkFalsy: true}).isLength({max: 70}),
  query(&#039;draw&#039;).not().isEmpty().isInt({min: 1}),
], async (req, res) =&gt; {
  // Check validation results.
  const result = validationResult(req);
  if (!result.isEmpty())
    // If the parameter is invalid, a 400 error is returned.
    return void res.status(400).end();

  // Get page data.
  const paginate = await PersonModel.paginate(req.query);

  // Set the received drawing count as-is in the response.
  paginate.draw = req.query.draw;
  res.json(paginate);
});

module.exports = router;</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
        <!--begin::Tab panel-->
        <div class="tab-pane fade" id="disable-first-ajax-call-model-tab" role="tabpanel">
          <!--begin::Block-->
          <div class="py-5">
            This is a Model script used in server-side processing created with <a href="https://takuya-motoshima.github.io/express-sweet/" target="_blank">express-sweet</a>, which extends Node.js express.
          </div>
          <!--end::Block-->
          <div class="highlight-code">
            <pre class="language-javascript">
              <code class="language-javascript">const Model = require(&#039;express-sweet&#039;).database.Model;
const {merge} = require(&#039;deep-fusion&#039;);

module.exports = class extends Model {
  static get table() {
    return &#039;person&#039;;
  }

  static get attributes() {
    return {
      id: {
        type: this.DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      name: this.DataTypes.STRING,
      position: this.DataTypes.STRING,
      office: this.DataTypes.STRING,
      age: this.DataTypes.INTEGER,
      startDate: this.DataTypes.DATE,
      salary: this.DataTypes.DECIMAL(10, 2),
    };
  }

  /**
   * Get page data.
   */
  static async paginate(options) {
    // Initialize options.
    options = merge({
      start: 0,
      length: 30,
      order: &#039;name&#039;,
      dir: &#039;asc&#039;,
      search: {
        keyword: null,
      },
    }, options);

    // Filter conditions.
    const where = {};
    if (options.search.keyword)
      where.name = {[super.Op.like]: `%${options.search.keyword}%`};

    // Get page data.
    const data = await super.findAll({
      where,
      offset: parseInt(options.start, 10),
      limit: parseInt(options.length, 10),
      order: [super.literal(`${options.order} ${options.dir}`)],
      raw: true,
    });

    // Get the total number of records.
    const recordsTotal = await super.count();

    // Get the number of filtered records.
    const recordsFiltered = await super.count({where});
    return {data, recordsTotal, recordsFiltered};
  }
}</code>
            </pre>
          </div>
        </div>
        <!--end::Tab panel-->
      </div>
      <!--end::Tab content-->
    </div>
    <!--end::Highlight-->
  </div>
  <!--end::Code-->
</div>
<!--end::Section-->